<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiaohuashifu.recruit.registration.service.dao.RecruitmentMapper">

<!--    <insert id="insertRecruitment" keyProperty="id">-->
<!--        insert into recruitment(organization_id, recruitment_department_ids, position_name, recruitment_numbers,-->
<!--                                position_duty, position_requirement, recruitment_grades, recruitment_college_ids,-->
<!--                                recruitment_major_ids, release_time, registration_time_from, registration_time_to,-->
<!--                                recruitment_status)-->
<!--        values(#{organizationId},-->
<!--               json_array(-->
<!--                <foreach item="recruitmentDepartmentId" collection="recruitmentDepartmentIds" separator="," >-->
<!--                    cast(#{recruitmentDepartmentId} as char)-->
<!--                </foreach>),-->
<!--               #{positionName}, #{recruitmentNumbers}, #{positionDuty}, #{positionRequirement},-->
<!--                json_array(-->
<!--                <foreach item="recruitmentGrade" collection="recruitmentGrades" separator="," >-->
<!--                    #{recruitmentGrade}-->
<!--                </foreach>),-->
<!--                json_array(-->
<!--                <foreach item="recruitmentCollegeId" collection="recruitmentCollegeIds" separator="," >-->
<!--                    cast(#{recruitmentCollegeId} as char)-->
<!--                </foreach>),-->
<!--                json_array(-->
<!--                <foreach item="recruitmentMajorId" collection="recruitmentMajorIds" separator="," >-->
<!--                    cast(#{recruitmentMajorId} as char)-->
<!--                </foreach>),-->
<!--                #{releaseTime}, #{registrationTimeFrom}, #{registrationTimeTo}, #{recruitmentStatus})-->
<!--    </insert>-->

    <update id="addRecruitmentCollege">
        update recruitment
        set recruitment_college_ids = json_array_append(recruitment_college_ids, '$', cast(#{collegeId} as char))
        where id = #{id}
        and not cast(#{collegeId} as char) member of(recruitment_college_ids->'$')
    </update>

    <update id="addRecruitmentMajor">
        update recruitment
        set recruitment_major_ids = json_array_append(recruitment_major_ids, '$', cast(#{majorId} as char))
        where id = #{id}
        and not cast(#{majorId} as char) member of(recruitment_major_ids->'$')
    </update>

    <update id="addRecruitmentGrade">
        update recruitment
        set recruitment_grades = json_array_append(recruitment_grades, '$', #{grade})
        where id = #{id}
          and not #{grade} member of(recruitment_grades->'$')
    </update>

    <update id="addRecruitmentDepartment">
        update recruitment
        set recruitment_department_ids =
            json_array_append(recruitment_department_ids, '$', cast(#{departmentId} as char))
        where id = #{id}
          and not cast(#{departmentId} as char) member of(recruitment_department_ids->'$')
    </update>

    <update id="removeRecruitmentCollege">
        update recruitment
        set recruitment_college_ids = json_remove(recruitment_college_ids,
            replace(json_search(recruitment_college_ids, 'one', cast(#{collegeId} as char)), '"', ''))
        where id = #{id}
        and cast(#{collegeId} as char) member of(recruitment_college_ids->'$')
    </update>

    <update id="removeRecruitmentMajor">
        update recruitment
        set recruitment_major_ids = json_remove(recruitment_major_ids,
            replace(json_search(recruitment_major_ids, 'one', cast(#{majorId} as char)), '"', ''))
        where id = #{id}
          and cast(#{majorId} as char) member of(recruitment_major_ids->'$')
    </update>

    <update id="removeRecruitmentGrade">
        update recruitment
        set recruitment_grades = json_remove(recruitment_grades,
            replace(json_search(recruitment_grades, 'one', #{grade}), '"', ''))
        where id = #{id}
          and #{grade} member of(recruitment_grades->'$')
    </update>

    <update id="removeRecruitmentDepartment">
        update recruitment
        set recruitment_department_ids =json_remove(recruitment_department_ids,
            replace(json_search(recruitment_department_ids, 'one', cast(#{departmentId} as char)), '"', ''))
        where id = #{id}
          and cast(#{departmentId} as char) member of(recruitment_department_ids->'$')
    </update>

    <update id="updateRecruitmentStatusWhenReleaseTimeLessThan">
        update recruitment
        set recruitment_status = #{newRecruitmentStatus}
        where recruitment_status = #{oldRecruitmentStatus}
          and release_time &lt; #{time}
    </update>

    <update id="updateRecruitmentStatusWhenRegistrationTimeFromLessThan">
        update recruitment
        set recruitment_status = #{newRecruitmentStatus}
        where recruitment_status = #{oldRecruitmentStatus}
          and registration_time_from &lt; #{time}
    </update>

    <update id="updateRecruitmentStatusWhenRegistrationTimeToLessThan">
        update recruitment
        set recruitment_status = #{newRecruitmentStatus}
        where recruitment_status = #{oldRecruitmentStatus}
          and registration_time_to &lt; #{time}
    </update>

</mapper>