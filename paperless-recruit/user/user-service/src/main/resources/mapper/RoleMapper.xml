<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiaohuashifu.recruit.user.service.dao.RoleMapper">
    <sql id="role">
        id, parent_role_id, role_name, description, is_available as available, create_time, update_time
    </sql>

    <sql id="r_role">
        r.id, r.parent_role_id, r.role_name, r.description, r.is_available as available, r.create_time, r.update_time
    </sql>

    <insert id="saveRole" keyProperty="id">
        insert into role(parent_role_id, role_name, description, is_available)
        values(#{parentRoleId}, #{roleName}, #{description}, #{available})
    </insert>

    <insert id="saveUserRole">
        insert into user_role(user_id, role_id)
        values(#{userId}, #{roleId})
    </insert>

    <insert id="saveRolePermission">
        insert into role_permission(role_id, permission_id)
        values(#{roleId}, #{permissionId})
    </insert>

    <delete id="deleteRole">
        delete from role
        where id = #{id}
    </delete>

    <delete id="deleteRolePermissionByRoleId">
        delete from role_permission
        where role_id = #{roleId}
    </delete>

    <delete id="deleteRolePermissionByRoleIdAndPermissionId">
        delete from role_permission
        where role_id = #{roleId}
        and permission_id = #{permissionId}
    </delete>



    <delete id="deleteUserRoleByRoleId">
        delete from user_role
        where role_id = #{roleId}
    </delete>

    <delete id="deleteUserRoleByUserIdAndRoleId">
        delete from user_role
        where user_id = #{userId}
        and role_id = #{roleId}
    </delete>

    <select id="getRole" resultType="role">
        select <include refid="role"/>
        from role
        where id = #{id}
    </select>

    <select id="getRoleByQuery" resultType="role">
        select <include refid="role"/>
        from role
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="idList != null">
                and id in (
                <foreach collection="idList"  item="item" index="index" separator=",">
                    #{item}
                </foreach>
                )
            </if>
            <if test="parentRoleId != null">
                and parent_role_id = #{parentRoleId}
            </if>
            <if test="roleName != null">
                and role_name like "%"#{roleName}"%"
            </if>
            <if test="available != null">
                and is_available = #{available}
            </if>
        </where>
    </select>

    <select id="getRoleListByUserId" resultType="role">
        select <include refid="r_role"/>
        from user_role as ur inner join role as r on ur.role_id = r.id
        where ur.user_id = #{userId}
    </select>

    <select id="getIdListByParentRoleId" resultType="long">
        select id
        from role
        where parent_role_id = #{parentRoleId}
    </select>

    <select id="getIdListByParentRoleIdAndAvailable" resultType="long">
        select id
        from role
        where parent_role_id = #{parentRoleId}
        and is_available = #{available}
    </select>

    <select id="getRoleNameByUserId" resultType="string">
        select r.role_name
        from user_role as ur inner join role as r on ur.role_id = r.id
        where ur.user_id = #{userId}
    </select>

    <select id="getParentRoleIdById" resultType="long">
        select parent_role_id
        from role
        where id = #{id}
    </select>

    <select id="count" resultType="int">
        select count(*)
        from role
        where id = #{id}
    </select>

    <select id="countByParentRoleId" resultType="int">
        select count(*)
        from role
        where parent_role_id = #{parentRoleId}
    </select>

    <select id="countByRoleName" resultType="int">
        select count(*)
        from role
        where role_name = #{roleName}
    </select>

    <select id="countByIdAndAvailable" resultType="int">
        select count(*)
        from role
        where id = #{id} and is_available = #{available}
    </select>

    <select id="countUserRoleByUserIdAndRoleId" resultType="int">
        select count(*)
        from user_role
        where user_id = #{userId} and role_id = #{roleId}
    </select>

    <select id="countRolePermissionByRoleIdAndPermissionId" resultType="int">
        select count(*)
        from role_permission
        where role_id = #{roleId} and permission_id = #{permissionId}
    </select>

    <update id="updateRoleName">
        update role
        set role_name = #{roleName}
        where id = #{id}
    </update>

    <update id="updateParentRoleId">
        update role
        set parent_role_id = #{parentRoleId}
        where id = #{id}
    </update>

    <update id="updateDescription">
        update role
        set description = #{description}
        where id = #{id}
    </update>

    <update id="updateAvailable">
        update role
        set is_available = #{available}
        where id = #{id}
    </update>

    <update id="updateAvailableIfUnavailable">
        update role
        set is_available = true
        where id = #{id}
        and is_available = false
    </update>
</mapper>